spring.datasource.url=jdbc:postgresql://korike.c4abgufvfyhp.us-east-1.rds.amazonaws.com:5432/korike
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
server.port=8443
#server.address=korikelogistics.com
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1
server.ssl.key-store=korikelogistics/korikelogistics.p12
server.ssl.key-store-password=password
#server.ssl.key-store-type=PKCS12
server.ssl.key-alias=korikelogistics
server.ssl.key-password=password
# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy


logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n
logging.level.org.hibernate.SQL=error
spring.mvc.pathmatch.matching-strategy = ANT_PATH_MATCHER

aws.s3.endpointUrl = https://korike.s3.ap-south-1.amazonaws.com
aws.s3.bucketName = korike
aws.s3.accessKey = AKIAZGTLCV74QE3XDDW2
aws.s3.secretKey = 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


##JWT config
security.jwt.token.secret-key = secret
security.jwt.token.expire-length =30000
security.refresh.token.interval = 5
